/*
 * Vanessa Chammas
 * Program 1 CS 310
 * cssc 0709
 * UnorderedArrayPriorityQueue
 * 
 */


package data_structures;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class UnorderedArrayPriorityQueue<E extends Comparable<E>> implements PriorityQueue<E> {

    private E[] elements;
    private int capacity;
    private int numElements;

   /*
     * Create a new ordered priority queue
     */
    public UnorderedArrayPriorityQueue() {
        this(DEFAULT_MAX_CAPACITY);
    }

   /*
     * Create a new ordered priority queue
     *
     * @param capacity maximum capacity
     */
    public UnorderedArrayPriorityQueue(int capacity) {
        this.capacity = capacity;
        elements = (E[]) new Comparable[capacity];
        numElements = 0;
    }

   /*
     * Insert a new element into the tree. Object will not be inserted if queue
     * is full
     *
     * @param object Object to be inserted
     * @return True if the object has been inserted, otherwise false.
     */
    @Override
    public boolean insert(E object) {
        if (isFull()) {
            return false;
        }

        elements[numElements++] = object;
        return true;
    }

   /*
     * Remove the object of highest priority that has been in the
     *
     * @return The next element that has the highest priority
     * @throws NoSuchElementException if the queue is empty
     */
    @Override
    public E remove() {
        if (isEmpty()) {
            return null;
        }

        // Find the highest priority        
        int removeIndex = findHighestPriorityElement();
        E highestPriorityObject = (E) elements[removeIndex];

        // Remove the highest priority
        for (int i = removeIndex; i < numElements - 1; i++) {
            elements[i] = elements[i + 1];
        }

        numElements--;
        return highestPriorityObject;
    }

   /*
     * Search the element that has the highest priority
     *
     * @return Index of the element in the queue
     */
    private int findHighestPriorityElement() {
        E highestPriorityObject = (E) elements[0];
        int index = 0;

        for (int i = 1; i < numElements; i++) {
            if (((E) elements[i]).compareTo(highestPriorityObject) < 0) {
                highestPriorityObject = (E) elements[i];
                index = i;
            }
        }

        return index;
    }

   /*
     * Delete all instances of the object in the queue
     *
     * @param object Object to delete
     * @return True if it was deleted, otherwise false
     */
    @Override
    public boolean delete(E object) {
        boolean result = false;
        int index = search(object);

        while (index >= 0) {
            // Shift and re-arrange the queue
            for (int i = index; i < numElements - 1; i++) {
                elements[i] = elements[i + 1];
            }

            numElements--;
            result = true;

            // Find the next
            index = search(object);
        }

        return result;
    }

   /*
     * Search the object in the queue
     *
     * @param object Object to search
     * @return Index of the object, -1 if not found
     */
    private int search(E object) {
        for (int i = 0; i < numElements; i++) {
            if (((E) elements[i]).compareTo(object) == 0) {
                return i;
            }
        }

        return -1;
    }

   /*
     * Return the next highest priority object.
     *
     * @return Highest priority object.
     * @throws NoSuchElementException if queue is empty
     */
    @Override
    public E peek() {
        if (isEmpty()) {
            return null;
        }

        int index = findHighestPriorityElement();
        return (E) elements[index];
    }

   /*
     * Check if object is in the queue
     *
     * @param object Object to search
     * @return True if it does, otherwise false
     */
    @Override
    public boolean contains(E object) {
        return search(object) >= 0;
    }

   /*
     * Return the number of elements in the queue
     *
     * @return Number of elements
     */
    @Override
    public int size() {
        return numElements;
    }

   /*
     * Make the queue empty
     */
    @Override
    public void clear() {
        numElements = 0;
    }

   /*
     * Check if the queue is empty
     *
     * @return True if it is, otherwise false
     */
    @Override
    public boolean isEmpty() {
        return numElements == 0;
    }

   /*
     * Check if the queue is full
     *
     * @return True if it is, otherwise false
     */
    @Override
    public boolean isFull() {
        return numElements >= capacity;
    }

   /*
     * Return an iterator that will iterate the content of the queue
     *
     * @return Iterator
     */
    @Override
    public Iterator<E> iterator() {
        return new UnorderedArrayPriorityQueueIterator<E>();
    }

    private class UnorderedArrayPriorityQueueIterator<E> implements Iterator<E> {

        private Object[] iteratedElements;
        private int nextIndex = 0;

       /*
         * Arrange the elements to be traversed. We create a copy of the element
         * and no direct access to the actual array to avoid problems
         */
        public UnorderedArrayPriorityQueueIterator() {
            iteratedElements = new Object[numElements];

            for (int i = 0; i < numElements; i++) {
                iteratedElements[i] = elements[i];
            }
        }

       /*
         * Check if here is a next element to iterate
         *
         * @return True if there is, otherwise false
         */
        @Override
        public boolean hasNext() {
            return nextIndex < iteratedElements.length;
        }

       /*
         * Get the next element to iterate
         *
         * @return Element
         * @throws NoSuchElementException if there is no next element
         */
        @Override
        public E next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }

            E element = (E) iteratedElements[nextIndex++];
            return element;
        }
    }
}

